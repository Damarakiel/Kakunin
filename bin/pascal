#!/usr/bin/env node

const path = require('path');
const child_process = require('child_process');
const envfile = require('node-env-file');
const initializer = require('../helpers/initializer');

function isInitCommand() {
  return process.argv.length > 2 && process.argv[2] === 'init';
}

function getPascalConfigPath() {
  const args = process.argv.filter(arg => !arg.startsWith('@'));
  let configFile = 'pascal.conf.js';

  if (args.length > 2) {
    configFile = args[2];
  }

  return process.cwd() + '/' + configFile;
}

function getScenariosTags() {
  const tags = [];

  for (let i = 0; i < process.argv.length; i++) {
    if (process.argv[i].startsWith('@')) {
      tags.push('--cucumberOpts.tags');
      tags.push(process.argv[i])
    }
  }

  return tags;
}

envfile(process.cwd() + '/.env', { raise: false, overwrite: false });

if (isInitCommand()) {
  (async () => {
    await initializer.initConfig();
    await initializer.initEnv();
    await initializer.generateProjectStructure();
  })();
} else {
  const argv = [
    'protractor.conf.js',
    '--pascalConfig', getPascalConfigPath(),
    '--projectPath', process.cwd(),
    '--disableChecks',
    ...getScenariosTags()
  ];

  child_process.spawn(path.join('node_modules', '.bin', 'protractor'), argv, {
    stdio: 'inherit',
    cwd: path.join(__dirname, '..')
  }).once('close', () => {
    console.log('Protractor has finished');
  });
}
