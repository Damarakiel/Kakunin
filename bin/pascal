#!/usr/bin/env node

const path = require('path');
const child_process = require('child_process');
const envfile = require('node-env-file');
const initializer = require('../helpers/initializer');
const getCommandArguments = JSON.parse(process.env.npm_config_argv).original.slice(2);

function isInitCommand() {
  return process.argv.length > 2 && process.argv[2] === 'init';
}

function getPascalConfigPath() {
  let configFile = 'pascal.conf.js';

  const pascalConfig = getCommandArguments.find((arg) => arg.indexOf('--pascalConfig') >= 0);

  if (pascalConfig !== undefined) {
    const characterPosition = pascalConfig.indexOf('=');
    configFile = pascalConfig.substr(characterPosition+1);
  }

  return process.cwd() + '/' + configFile;
}

function getScenariosTags() {
  const tags = [];

  const tagsConfig = getCommandArguments.find((arg) => arg.indexOf('--tags') >= 0);

  if (tagsConfig !== undefined) {
    const characterPosition = tagsConfig.indexOf('=');
    tagsConfig.substr(characterPosition+1).split(' ').forEach((tag) => {
      tags.push('--cucumberOpts.tags');
      tags.push(tag);
    });
  }

  return tags;
}

envfile(process.cwd() + '/.env', { raise: false, overwrite: false });

if (isInitCommand()) {
  (async () => {
    await initializer.initConfig();
    await initializer.initEnv();
    await initializer.generateProjectStructure();
  })();
} else {
  const optionsToFilter = ['--pascalConfig', '--projectPath', '--disableChecks', '--tags'];
  const commandLineArgs = getCommandArguments.filter((arg) => {
      const characterPosition = arg.indexOf('=');
      if (characterPosition > 0) {
        return !optionsToFilter.includes(arg.substr(0, characterPosition));
      }
      return !optionsToFilter.includes(arg);
    });

  const argv = [
    'protractor.conf.js',
    `--pascalConfig=${getPascalConfigPath()}`,
    `--projectPath=${process.cwd()}`,
    '--disableChecks',
    ...getScenariosTags(),
    ...commandLineArgs
  ];

  child_process.spawn(path.join('node_modules', '.bin', 'protractor'), argv, {
    stdio: 'inherit',
    cwd: path.join(__dirname, '..')
  }).once('close', () => {
    console.log('Protractor has finished');
  });
}
